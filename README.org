#+TITLE: Learning by Playing - Rust

With public announcement of Mozilla's Project Quantum I noticed Rust.
The new Firefox Web Browser Engine Servo is written in Rust.
When I'm right than Mozilla implemented stepwise starting with Quantum CSS Engine (Stylo).

Since then I have been a little shy to spent efforts to learn
a new programming language.
I started with Basic (Commodore, KC 85/2), Pascal (PC 1750),
Modular-2 (Novell Network connected IBM-PC),
C, Java, TCL, C++, (E)Lisp, and finally Python.

Why now, that I start to spent time to lean Rust.
It is considered a systems programming language,
and it announced itself being focused on memory savety and concurrency.

Rust got my attention in combination with WebAssembly,
anthor project I learnt from Mozilla.
The Web presented me a link to a talk given by Steve Klabnik:
Rust, WebAssembly, and the future of Serverless.
I jumped to the next video of Steve:
The History of Rust.
And finally my curiosity was enlighted by Steve's project
[[https://intermezzos.github.io/][intermezzOS]], which got me a pointer to Philipp's project.
His Words from [[http://intermezzos.github.io/book/second-edition/][The intermezzOS Book]]: "That’s when I found an awesome link: 
Writing an OS in Rust by Philipp Oppermann. 
I cannot speak enough about how awesome Phil’s tutorial is; ..."


Some emedded system projects convinced me to look for Rust
- Writeing an OS in Rust - [[https://os.phil-opp.com/][Philipp Opperman's project]]
- [[https://doc.rust-lang.org/embedded-book][The Embedded Rust Book]] with its [[https://github.com/rust-embedded/wg][Embedded devices Working Group]]


Studied several videos and rust embedded,
two of them were with Steve Klabnik an author of the book:
- 2019: rust, webassembly, future of serverless (same conference which had Lin Clark for WA+SI) at DevFest
- 2016: the his-story of rust at ACM


Ways to "Dive into Rust"
- The Plumber's Guide To Rust with "Periodic System" and Sugar
- The Rust Preludium before the "Intermezzo"
- [[play-book.org][The Common Start - Read a Book]]
- [[play-std.org][The Standard Libraries's Tour]]
- The Servo's Bullet List

Took some [[play-notes.org][Notes on Rust]] and documented my [[play-ground.org][play ground]].

** The Plumber's Guide to Rust

Inspired by the preparation material for a talk of Jessy Pelletier-Lemire
I learnt from his page: [[https://web.archive.org/web/20200918155402/http://jadpole.github.io/rust/type-system][Visualizing Rust's type-system]]:
"Well, [[https://doc.rust-lang.org/std/keyword.trait.html][traits]] and values are really all there is; 
the deeper you go, the more precise you get, 
until you reach [[https://doc.rust-lang.org/std/index.html#primitives][types]] which are nothing more than subsets of [[https://doc.rust-lang.org/std/marker/trait.Sized.html][Sized]] 
with a special syntax to manipulate the underlying memory 
and from where you cannot go deeper."

*** The Periodic Table of Rust Types

My local copy of [[http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/][The Periodic Table of Rust Types]].

#+CAPTION: http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|
|          | Immutable Pointer        | Mutable Pointer         | Owned Pointer            | Bare                 | Unsized             |
|          | (by-immutable-reference) | (by-mutable-reference)  |                          | (by-value)           | (dynamically sized) |
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|
| Raw      | * const ~T~              | *mut ~T~                | N/A                      |                      |                     |
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|
| Simple   | & ~T~                    | &mut ~T~                | Box < ~T~ >              | ~T~                  |                     |
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|
| Array    | & [ ~T~ ]                | &mut [ ~T~ ]            | Box <[ ~T~ ]>            | [ ~T~; ~n~ ]         | [ ~T~ ]             |
|          |                          |                         | std::vec::Vector < ~T~ > |                      |                     |
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|
| String   | & ~str~                  | &mut ~str~              | Box < ~str~ >            | N/A                  | ~str~               |
|          |                          |                         | std::string::String      | N/A                  |                     |
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|
| Trait    | & ~Trait~                | &mut ~Trait~            | Box < ~Trait~ >          |                      | ~Trait~             |
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|
| Callable | Fn ( ~T...~ ) -> ~U~     | FnMut ( ~T...~ ) -> ~U~ | FnOnce ( ~T...~ ) -> ~U~ | fn ( ~T...~ ) -> ~U~ |                     |
|----------+--------------------------+-------------------------+--------------------------+----------------------+---------------------|

*** (Un)sized Rust Types

This is a table created based on [[https://doc.rust-lang.org/reference/dynamically-sized-types.html][Dynamically Sized Types]].

#+CAPTION: https://doc.rust-lang.org/reference/dynamically-sized-types.html
| Sized Types                          | Unsized Types (dynamically sized types - DSTs)                       |
|--------------------------------------+----------------------------------------------------------------------|
| size known at compile-time           | size only known at run-time                                          |
| implement the trait [[https://doc.rust-lang.org/reference/special-types-and-traits.html#sized][Sized]]            | Pointer types to DSTs have twice the size of pointers to sized types |
| Sized is implemented by the compiler | - Pointers to slices also store the number of elements of the slice  |
|                                      | - Pointers to trait objects also store a pointer to a vtable         |
|--------------------------------------+----------------------------------------------------------------------|
| ~std::mem::size_of::<T>()~           | when ~T~ has no statically-known size, e.g.,                         |
| Returns the size of a type in bytes. | a slice ~[T]~ or a [[https://doc.rust-lang.org/book/ch17-02-trait-objects.html][trait object]],                                     |
|                                      | then ~std::mem::size_of_val(&T)~ can be used                         |
|                                      | to get the dynamically-known size.                                   |

The  [[https://doc.rust-lang.org/book/ch17-02-trait-objects.html#defining-a-trait-for-common-behavior][BK]], explains trait-object: A trait object points to both 
- an instance of a type implementing our specified trait 
- as well as a table used to look up trait methods on that type at
  runtime.   

*** The Rust's sugar table

Is a copy from the great [[https://cheats.rs/][Rust Language Cheat Sheet]].

#+CAPTION: https://cheats.rs/
| Name                          | Description                                                               |
|-------------------------------+---------------------------------------------------------------------------|
| Coercions [[https://doc.rust-lang.org/nightly/nomicon/coercions.html][NOM]]                 | 'Weaken' types to match signature, e.g., ~&mut T~ to ~&T~.                |
| Deref [[https://doc.rust-lang.org/nightly/nomicon/vec-deref.html#deref][NOM]], [[https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules][SvF]]                | [[https://doc.rust-lang.org/std/ops/trait.Deref.html][Deref]] ~x: T~ until ~*x~, ~**x~, ... compatible with some target ~S~.      |
| Prelude [[https://doc.rust-lang.org/std/prelude/index.html][STD]]                   | Automatic import of basic types.                                          |
| Reborrow                      | Since ~x: &mut T~ can't be copied; move new ~&mut *x~ instead.            |
| Lifetime Elision [[https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision][BK]], [[https://doc.rust-lang.org/nightly/nomicon/lifetime-elision.html#lifetime-elision][NOM]], [[https://doc.rust-lang.org/stable/reference/lifetime-elision.html#lifetime-elision][REF]] | Automatically annotate ~f(x: &T)~ to ~f<'a>(x: &'a T)~.                   |
| Method Resolution [[https://doc.rust-lang.org/stable/reference/expressions/method-call-expr.html][REF]]         | Deref or borrow ~x~ until ~x.f()~ works.                                  |
| Match Ergonomics [[https://rust-lang.github.io/rfcs/2005-match-ergonomics.html][RFC]]          | Repeatedly dereference [[https://doc.rust-lang.org/stable/reference/glossary.html#scrutinee][scrutinee]] and add ~ref~ and ~ref mut~ to bindings. |

Rust language cheat sheet contains clickable links to
- The Rust Programming Language Book [[https://doc.rust-lang.org/book/][BK]],
- Rust by Example [[https://doc.rust-lang.org/stable/rust-by-example/][EX]],
- The Rust Standard Library Docs [[https://doc.rust-lang.org/std][STD]],
- The Rustonomicon [[https://doc.rust-lang.org/nightly/nomicon/][NOM]],
- The Rust Reference [[https://doc.rust-lang.org/stable/reference/][REF]].

** The Rust Preludium

[[https://doc.rust-lang.org/reference/names/preludes.html#the-no_implicit_prelude-attribute][The ~no_implicit_prelude~ attribute]]

The ~no_implicit_prelude~ [[https://doc.rust-lang.org/reference/attributes.html][attribute]] may be applied at the crate level or
on a module to indicate that it should not automatically bring the
[[https://doc.rust-lang.org/reference/names/preludes.html#standard-library-prelude][standard library prelude]], [[https://doc.rust-lang.org/reference/names/preludes.html#extern-prelude][extern prelude]], or [[https://doc.rust-lang.org/reference/names/preludes.html#tool-prelude][tool prelude]] into scope
for that module or any of its descendants. Starting in the 2018
edition, it will remove the [[https://doc.rust-lang.org/reference/names/preludes.html#macro_use-prelude][~macro_use~ prelude]]. 

This attribute does not affect the [[https://doc.rust-lang.org/reference/names/preludes.html#language-prelude][language prelude]].

*** Language prelude

The language prelude includes names of types and attributes that are
built-in to the language. The language prelude is always in scope. It
includes the following: 
- Type namespace
  - [[https://doc.rust-lang.org/reference/types/boolean.html][Boolean type]] - ~bool~
  - [[https://doc.rust-lang.org/reference/types/textual.html][Textual types]] - ~char~ and ~str~
  - [[https://doc.rust-lang.org/reference/types/numeric.html][Numerical types]]
    - [[https://doc.rust-lang.org/reference/types/numeric.html#integer-types][Integer types]] - ~i8~, ~i16~, ~i32~, ~i64~, ~i128~, ~u8~, ~u16~,
      ~u32~, ~u64~, ~u128~ 
    - [[https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types][Machine-dependent integer types]] - ~usize~ and ~isize~; ~usize~
      and ~isize~ are at least 16-bits wide. Note: Many pieces of Rust
      code may assume that pointers, ~usize~, and ~isize~ are either
      32-bit or 64-bit. As a consequence, 16-bit pointer support is
      limited and may require explicit care and acknowledgment from a
      library to support. 
    - [[https://doc.rust-lang.org/reference/types/numeric.html#floating-point-types][floating-point types]] - ~f32~ and ~f64~
  - Macro namespace
    - [[https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index][Built-in attributes]]

** The Servo's Basic Rust

The quickstart guide for hacking servo lists some basic things 
one must know to read Servo's code.

- [[https://doc.rust-lang.org/stable/rust-by-example/flow_control/match.html][Match]] and ~Patterns~ [10]
- [[https://doc.rust-lang.org/stable/rust-by-example/std/option.html][Options]]
- [[https://doc.rust-lang.org/stable/rust-by-example/expression.html][Expression]]
- [[https://doc.rust-lang.org/stable/rust-by-example/trait.html][Traits]]
- Understand how ~println!()~ works, especially the [[https://doc.rust-lang.org/std/fmt/#formatting-traits][formatting traits]].

** The Rust.unwrap() Guide

There is an comprehensive collection of programmer's recipes in [[https://rust-lang-nursery.github.io/rust-cookbook/about.html#a-note-about-error-handling][Cookin'
with Rust]] with a wise sentence on Rust's error handling: "Error
handling in Rust is robust when done correctly, but in today's Rust it
requires a fair bit of boilerplate. Because of this one often sees
Rust examples *filled with ~unwrap~ calls* instead of proper error
handling." Thus Rust's chefs maintain(ed) crate [[https://crates.io/crates/error-chain][error-chain]].

Look's as I am late : [[https://internals.rust-lang.org/t/end-of-days-for-the-rust-lang-nursery/8750][End of days for the rust-lang nursery]]! 
So finally [[https://internals.rust-lang.org/t/rust-lang-nursery-deprecation/11205][it looks]] as if the nurses were people closed to the
language developers. Finally some repositories where moved to 
the core language's repo ~rust-lang~ and some to
~rust-lang-deprecated~.

But the cookbook has a nice systematic [[https://rust-lang-nursery.github.io/rust-cookbook/intro.html][index]] with following sections:
- [[https://rust-lang-nursery.github.io/rust-cookbook/intro.html#algorithms][Algorithms]]
- Command Line
- Compression
- Concurrency
- Data Structures
- Database
- [[https://rust-lang-nursery.github.io/rust-cookbook/intro.html#date-and-time][Date and Time]]
- Development Tools
- Encoding
- File System
- Hardware Support
- Memory Management
- Networking
- Operating System
- Science
- Text Processing
- [[https://rust-lang-nursery.github.io/rust-cookbook/intro.html#web-programming][Web Programming]]
  - Scraping Web Pages
  - Uniform Resource Locations (URL)
  - Media Types (MIME)
  - Clients
  - Web Authentication

** Foodnotes

[1] https://doc.rust-lang.org/cargo/reference/manifest.html#the-package-section
[2] https://emacs.stackexchange.com/questions/56126/attempting-to-use-org-babel-to-write-literate-rust/56127#56127
[3] [[https://doc.rust-lang.org/book][Rust-Book]]
[4] [[https://cheats.rs/][Rust Language Cheat Sheet]]
[5] [[https://doc.rust-lang.org/stable/reference/][The Rust Reference]]
[6] [[https://danielkeep.github.io/tlborm/book/index.html][The Little Book of Rust Macros]]
[7] [[https://github.com/dtolnay/proc-macro-workshop][dtolnay / proc-macro-workshop]]   
[8] https://doc.rust-lang.org/book/ch03-02-data-types.html
[9] https://doc.rust-lang.org/book/ch03-05-control-flow.html#looping-through-a-collection-with-for
[10] https://doc.rust-lang.org/book/ch18-00-patterns.html

